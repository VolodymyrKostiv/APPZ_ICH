@page "/vacancydetails/{VacancyId:int}"

@using ICH.Client.API
@using ICH.Client.Enums
@using ICH.Shared.ViewModels.User
@using ICH.Shared.ViewModels.Vacancy
@using System.Text.Json

@inject HttpClient Http
@inject ILocalStorageService Storage

@if (!Downloading && VacancyDetails != null)
{
    <div class="col-6 offset-3">
        <div class="row">
            <HxCard CssClass="p-0">
                <HeaderTemplate>
                    <div style="padding: 10px; ">
                        <h3>@VacancyDetails.Title</h3>
                    </div>
                </HeaderTemplate>
                <BodyTemplate>
                    <HxCardText CssClass="m-1"><HxIcon Icon="BootstrapIcon.Calendar2DateFill" CssClass="mx-2" />Вакансія від @(VacancyDetails.CreationTime.ToString("MM/dd/yyyy"))</HxCardText>
                    <HxCardText CssClass="m-1"><HxIcon Icon="BootstrapIcon.Building" CssClass="mx-2" />@VacancyDetails.Company</HxCardText>
                        <HxCardText CssClass="m-1"><HxIcon Icon="BootstrapIcon.GeoFill" CssClass="mx-2" />@VacancyDetails.Location?.Title</HxCardText>
                        <HxCardText CssClass="m-1"><HxIcon Icon="BootstrapIcon.Check2" CssClass="mx-2" />@VacancyDetails.EmploymentType?.Title</HxCardText>
                        <HxCardText CssClass="m-1"><HxIcon Icon="BootstrapIcon.CurrencyDollar" CssClass="mx-2" />@VacancyDetails.Salary</HxCardText>
                        <HxCardTitle CssClass="mt-4 mx-2">Опис вакансії</HxCardTitle>
                        <HxCardText CssClass="mx-2">@VacancyDetails.Description</HxCardText>
                        <div class="flex-row mt-4">
                            @if ((CurrentUserVacancyStatus != UserVacancyStatus.Applied &&
                       CurrentUserVacancyStatus != UserVacancyStatus.Recruited) || CurrentUserVacancyStatus == UserVacancyStatus.None)
                            {
                            <HxButton CssClass="mx-1" Color="ThemeColor.Primary" Icon="BootstrapIcon.PersonCheck" OnClick="ApplyVacancy">Відгукнутися</HxButton>
                        }
                        else if (CurrentUserVacancyStatus == UserVacancyStatus.Applied || 
                        CurrentUserVacancyStatus == UserVacancyStatus.Proposed)
                        {
                            <HxButton CssClass="mx-1" Color="ThemeColor.Primary" Icon="BootstrapIcon.PersonCheck" OnClick="RejectVacancy">Скасувати</HxButton>
                        }
                        @*<HxButton CssClass="mx-1"
                    Color="ThemeColor.Primary"
                    Outline=true
                    Icon="BootstrapIcon.Heart">
                    Зберегти
                    </HxButton> *@
                    </div>
                </BodyTemplate>
            </HxCard>
        </div>
    </div>
}
else
{
    <div class="row justify-content-center align-items-center mt-5">
        <div class="col-4 justify-content-center align-items-center mt-5">
            <div class="row justify-content-center mt-5">
                <HxSpinner Color="ThemeColor.Primary" />
            </div>
        </div>
    </div>
}

@code
{
    [Parameter]
    public int VacancyId { get; set; }

    private bool Downloading;

    private VacancyViewModel VacancyDetails { get; set; }
    private VacancyService _vacancyService = new VacancyService();
    private UserStorageService _userStorageService;
    private UserViewModel _user;
    private UserVacancyStatus CurrentUserVacancyStatus;

    [Inject] protected IHxMessengerService Messenger { get; set; }

    protected override async Task OnInitializedAsync()
    {
        StartLoading();

        _userStorageService = new UserStorageService(Storage);
        _user = await _userStorageService.GetLoginnedUser();
        await GetVacancyDetails(VacancyId);
        CurrentUserVacancyStatus = await _userStorageService.GetUserVacancyStatus(_user, VacancyDetails);
        EndLoading();
    }

    private void StartLoading()
    {
        Downloading = true;
    }

    private void EndLoading()
    {
        Downloading = false;
    }

    private async Task ApplyVacancy()
    {
        try
        {
            await _userStorageService.UserApplyOnVacancy(_user, VacancyDetails);
            Messenger.AddInformation("Вакансія", "Успішно подано заявку!");
            CurrentUserVacancyStatus = UserVacancyStatus.Applied;
        }
        catch (Exception ex)
        {
            Messenger.AddError("Вакансія", "Щось пішло не так!");
        }
    }

    private async Task RejectVacancy()
    {
        try
        {
            await _userStorageService.ChangeUserVacancyStatus(_user, VacancyDetails, UserVacancyStatus.CandidateRejected);
            Messenger.AddInformation("Вакансія", "Успішно скасовано заявку!");
            CurrentUserVacancyStatus = UserVacancyStatus.CandidateRejected;
        }
        catch (Exception ex)
        {
            Messenger.AddError("Вакансія", "Щось пішло не так!");
        }
    }

    private async Task GetVacancyDetails(int id)
    {
        var vacancyDetails = await _vacancyService.GetVacancyDetails(id);

        VacancyDetails = vacancyDetails;
    }
}
