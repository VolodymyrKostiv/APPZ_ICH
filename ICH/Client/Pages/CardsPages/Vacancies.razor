@page "/vacancies"

@using ICH.Client.API;
@using ICH.Shared.ViewModels.Vacancy;
@using System.Text.Json;

@inject HttpClient Http
<div class="parent">
    <div class="row justify-content-around">
        <div class="col-3">
            <HxSearchBox DataProvider="ProvideSearchResults"
                         TItem="VacancyViewModel"
                         ItemTitleSelector="i => i.Title"
                         ItemSubtitleSelector="i => i.Company"
                         Placeholder="Посада або ім'я"
                         OnTextQueryTriggered="OnTextQueryTriggered">
                <NotFoundTemplate>
                    <div class="small py-2 px-3 text-muted"><HxIcon CssClass="me-2" Icon="BootstrapIcon.EmojiFrown" />Sorry, I did not find that...</div>
                </NotFoundTemplate>
            </HxSearchBox>
        </div>
        <div class="col-3">
            <HxDropdownButtonGroup>
                <HxDropdownToggleButton Color="ThemeColor.None">Вся Україна</HxDropdownToggleButton>
                <HxDropdownMenu CssClass="dropdown-menu-light">
                    <HxDropdownItemNavLink Href="#">Київ</HxDropdownItemNavLink>
                    <HxDropdownItemNavLink Href="#">Львів</HxDropdownItemNavLink>
                    <HxDropdownItemNavLink Href="#">Івано-Франківськ</HxDropdownItemNavLink>
                    <HxDropdownItemNavLink Href="#">Харків</HxDropdownItemNavLink>
                    <HxDropdownItemNavLink Href="#">Херсон</HxDropdownItemNavLink>
                </HxDropdownMenu>
            </HxDropdownButtonGroup>
        </div>
        <div class="col-3">
            <HxButton Text="Знайти" Size="ButtonSize.Regular" Color="ThemeColor.Danger" OnClick="async () => await Task.Delay(2000)" />
        </div>
    </div>
</div>

<div class="container">
    @if (_vacancies != null)
    {
        <div style="height: 800px; overflow-y: scroll;">
            <Virtualize Items="@_vacancies" Context="vacancy">
                @foreach (var vacancy in _vacancies)
                {
                    <div class="row mt-2">
                        <HxCard>
                            <BodyTemplate>
                                <HxCardTitle style="color: cornflowerblue">@vacancy.Title</HxCardTitle>
                                <HxCardSubtitle>@vacancy.Salary UAH</HxCardSubtitle>
                                <HxCardSubtitle>@vacancy.Company, @vacancy.Location</HxCardSubtitle>
                                <HxCardText>@vacancy.EmploymentType.Title, @vacancy.CreationTime.Date</HxCardText>
                                <HxCardText>@vacancy.Description</HxCardText>
                            </BodyTemplate>
                        </HxCard>
                    </div>
                }
            </Virtualize>
        </div>
    }
    else
    {
        <HxSpinner Color="ThemeColor.Primary" />
    }
</div>

@code {
    private ICollection<VacancyViewModel> _vacancies;

    protected override async Task OnInitializedAsync()
    {
        await GetAllVacancies();
        base.OnInitialized();
    }

    private async Task GetAllVacancies()
    {
        var response = await Http.GetAsync(VacancyGlobals.AllVacanciesUri);

        var content = await response.Content.ReadAsStringAsync();

        var vacancies = JsonSerializer.Deserialize<IEnumerable<VacancyViewModel>>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        _vacancies = vacancies.ToList();
    }

    private string triggeredTextQuery;
    private void OnTextQueryTriggered(string text) // йде сюди коли нажимаємо ентер у серч філді
    {
        triggeredTextQuery = text;
    }
    
    private async Task<SearchBoxDataProviderResult<VacancyViewModel>> ProvideSearchResults(SearchBoxDataProviderRequest request)
    {
        await Task.Delay(400);
        return new()
            {
               Data = _vacancies.Where(i => i.Title.Contains(request.UserInput, StringComparison.OrdinalIgnoreCase))
            };
    }
}
