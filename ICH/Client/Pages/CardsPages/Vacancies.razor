@page "/vacancies"

@using ICH.Client.API;
@using ICH.Shared.ViewModels.User
@using ICH.Shared.ViewModels.Vacancy;
@using System.Text.Json;
@using System.Text;
@using System.Net.Mime;

@inject HttpClient Http
@inject ILocalStorageService Storage

<style>
    .divBadge {
        font-size: 14px;
    }

    hr.filters {
        border-top: 2px solid red;
        width: 50%;
    }

    .filterNames {
        font-weight: bold;
    }
</style>

@if (!Downloading)
{
    <div class="col">
        <div class="row">
            <div class="col-3 offset-1">
                <HxInputText InputGroupStartText="Посада або компанія" @bind-Value="SearchName" />
            </div>
            <div class="col-3">
                <HxSelect Data="@Locations"
                          InputGroupStartText="Місто"
                          @bind-Value="@SelectedLocation"
                          Nullable="true"
                          NullText="Вся Україна"
                          TItem="LocationViewModel"
                          TValue="LocationViewModel"
                          TextSelector="@(p => p.Title)"
                          ValueSelector="@(p => p)" />
            </div>
            <div class="col-2">
                <HxDropdownButtonGroup>
                    <HxDropdownToggleButton Color="ThemeColor.Primary" Icon="@(IsDownSort ? BootstrapIcon.SortDown : BootstrapIcon.SortUp)">
                        Сортувати
                    </HxDropdownToggleButton>
                    <HxDropdownMenu>
                        <HxDropdownItem OnClick="OnUpSortChosen">
                            @if (!IsDownSort)
                            {
                                <b>За зростанням</b>
                            }
                            else
                            {
                                <div>За зростанням</div>
                            }
                        </HxDropdownItem>
                        <HxDropdownItem OnClick="OnDownSortChosen">
                            @if (IsDownSort)
                            {
                                <b>За спаданням</b>
                            }
                            else
                            {
                                <div>За спаданням</div>
                            }
                        </HxDropdownItem>
                        <HxDropdownDivider />
                        <HxDropdownItem OnClick="OnDateSortEnabled">
                            @if (IsDateSort)
                            {
                                <b>За датою</b>
                            }
                            else
                            {
                                <div>За датою</div>
                            }
                        </HxDropdownItem>
                        <HxDropdownItem OnClick="OnSalarySortEnabled">
                            @if (!IsDateSort)
                            {
                                <b>За зарплатнею</b>
                            }
                            else
                            {
                                <div>За зарплатнею</div>
                            }
                        </HxDropdownItem>
                    </HxDropdownMenu>
                </HxDropdownButtonGroup>
            </div>
            <div class="col-3">
                <div class="row">
                    <div class="col-6">
                        <div class="row">
                            <HxButton Icon="BootstrapIcon.Search" Text="Знайти" Size="ButtonSize.Regular" Color="ThemeColor.Danger" OnClick="OnSearchClicked" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-8 offset-1">
                @if (!DownloadingVacancies && _vacancies != null && _vacancies.Count != 0)
                {
                    <h4 style="margin-left: 20px">
                        @_vacancies.Count вакансій
                    </h4>
                    <div class="row mb-2" />
                    <Virtualize Items="@_vacancies" Context="vacancy">
                        <div class="row mt-2">
                            <div class="col ml-1 me-2">
                                <HxCard>
                                    <BodyTemplate>
                                        <HxCardTitle>
                                            <div class="d-flex justify-content-between">
                                                <div>
                                                    <HxNavLink CssClass="text-primary" Href="@(string.Concat("vacancydetails/", (vacancy.VacancyId.ToString())))">@vacancy.Title</HxNavLink>
                                                    </div>
                                                    <div></div>
                                                    <div>
                                                    @if (SpecialCategoriesSuitableForUser(vacancy.SpecialCategories))
                                                    {
                                                        <HxTooltip Text="Рекомендована вакансія" Placement="TooltipPlacement.Bottom">
                                                            <HxIcon Icon="BootstrapIcon.EmojiHeartEyes" />
                                                        </HxTooltip>
                                                    }
                                                </div>
                                            </div>
                                        </HxCardTitle>
                                        <HxCardSubtitle>@vacancy.Salary UAH</HxCardSubtitle>
                                        <HxCardSubtitle class="mt-1">@vacancy.Company, @vacancy?.Location.Title, @vacancy?.EmploymentType.Title</HxCardSubtitle>
                                            <HxCardText>@vacancy.Description</HxCardText>
                                            @foreach (var badge in vacancy.SpecialCategories)
                                        {
                                            @if (badge.SpecialCategoryId == SpecialCategories?.ElementAtOrDefault(0)?.SpecialCategoryId)
                                            {
                                                <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Success">
                                                    <div class="divBadge">
                                                        @SpecialCategories?.ElementAtOrDefault(0)?.Title
                                                    </div>
                                                </HxBadge>
                                            }
                                            else if (badge.SpecialCategoryId == SpecialCategories?.ElementAtOrDefault(1)?.SpecialCategoryId)
                                            {
                                                <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Danger">
                                                    <div class="divBadge">
                                                        @SpecialCategories?.ElementAtOrDefault(1)?.Title
                                                    </div>
                                                </HxBadge>
                                            }
                                            else if (badge.SpecialCategoryId == SpecialCategories?.ElementAtOrDefault(2)?.SpecialCategoryId)
                                            {
                                                <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Warning">
                                                    <div class="divBadge">
                                                        @SpecialCategories?.ElementAtOrDefault(2)?.Title
                                                    </div>
                                                </HxBadge>
                                            }
                                            else if (badge.SpecialCategoryId == SpecialCategories?.ElementAtOrDefault(3)?.SpecialCategoryId)
                                            {
                                                <HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Info">
                                                    <div class="divBadge">
                                                        @SpecialCategories?.ElementAtOrDefault(3)?.Title
                                                    </div>
                                                </HxBadge>
                                            }
                                        }
                                        <div class="flex-row align-content-end " style="text-align: right;">
                                            <HxCardText>
                                                <small class="text-muted">@((DateTime.Now.Subtract(@vacancy.CreationTime).Days / 7).ToString() + " тиж. тому")</small>
                                            </HxCardText>
                                        </div>
                                    </BodyTemplate>
                                </HxCard>
                            </div>
                        </div>
                    </Virtualize>
                }
                else if (_vacancies?.Count == 0)
                {
                    <HxAlert Color="ThemeColor.Info">
                        <h5>
                            За вашим запитом поки немає вакансій
                        </h5>
                        <h6>
                            Спробуйте змінити ключове слово або параметри пошуку
                        </h6>
                    </HxAlert>
                }
                else if (DownloadingVacancies)
                {
                    <div class="row justify-content-center align-items-center mt-5">
                        <div class="col-4 justify-content-center align-items-center mt-5">
                            <div class="row justify-content-center mt-5">
                                <HxSpinner Color="ThemeColor.Primary" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="col-3">
                <div class="row mb-3">
                    <div class="col-6">
                        <div class="row">
                            <HxSwitch Text="Фільтри" @bind-Value="@ShowFilterParameters" />
                        </div>
                    </div>
                </div>
                @if (ShowFilterParameters)
                {
                    <div class="row mb-1">
                        <HxCheckboxList TItem="CategoryViewModel"
                                        TValue="CategoryViewModel"
                                        Data="Categories"
                                        ItemValueSelector="@(x => x)"
                                        ItemTextSelector="@(x => x.Title)"
                                        @bind-Value=@SelectedCategories
                                        Label="Категорія"
                                        LabelCssClass="filterNames" />
                    </div>
                    <hr class="filters" />
                    <div class="row mt-1 mb-1">
                        <HxCheckboxList TItem="SpecialCategoryViewModel"
                                        TValue="SpecialCategoryViewModel"
                                        Data="SpecialCategories"
                                        ItemValueSelector="@(x => x)"
                                        ItemTextSelector="@(x => x.Title)"
                                        @bind-Value=@SelectedSpecialCategories
                                        Label="Підходить"
                                        LabelCssClass="filterNames" />
                    </div>
                    <hr class="filters" />
                    <div class="row mt-1 mb-1">
                        <HxCheckboxList TItem="EmploymentTypeViewModel"
                                        TValue="EmploymentTypeViewModel"
                                        Data="EmploymentTypes"
                                        ItemValueSelector="@(x => x)"
                                        ItemTextSelector="@(x => x.Title)"
                                        @bind-Value=@SelectedEmploymentTypes
                                        Label="Тип зайнятості"
                                        LabelCssClass="filterNames" />
                    </div>
                    <hr class="filters" />
                    <div class="row mt-1 mb-1">
                        <HxCheckboxList TItem="WorkTypeViewModel"
                                        TValue="WorkTypeViewModel"
                                        Data="WorkTypes"
                                        ItemValueSelector="@(x => x)"
                                        ItemTextSelector="@(x => x.Title)"
                                        @bind-Value=@SelectedWorkTypes
                                        Label="Характер роботи"
                                        LabelCssClass="filterNames" />
                    </div>
                    <hr class="filters" />
                    <div class="row mt-4">
                        <div class="col-6">
                            <div class="row">
                                <HxButton Outline="true" OnClick="OnResetFiltersClicked" Color="ThemeColor.Danger">Скинути</HxButton>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <div class="row justify-content-center align-items-center mt-5">
        <div class="col-4 justify-content-center align-items-center mt-5">
            <div class="row justify-content-center mt-5">
                <HxSpinner Color="ThemeColor.Primary" />
            </div>
        </div>
    </div>
}

@code {
    private ICollection<VacancyViewModel> _vacancies { get; set; }

    private string SearchName { get; set; }

    private List<LocationViewModel> Locations { get; set; }
    private LocationViewModel SelectedLocation { get; set; }

    private List<CategoryViewModel> Categories { get; set; }
    private List<CategoryViewModel> SelectedCategories { get; set; }

    private List<SpecialCategoryViewModel> SpecialCategories { get; set; }
    private List<SpecialCategoryViewModel> SelectedSpecialCategories { get; set; }

    private List<EmploymentTypeViewModel> EmploymentTypes { get; set; }
    private List<EmploymentTypeViewModel> SelectedEmploymentTypes { get; set; }

    private List<WorkTypeViewModel> WorkTypes { get; set; }
    private List<WorkTypeViewModel> SelectedWorkTypes { get; set; }

    private bool IsDownSort = true;
    private bool IsDateSort = true;

    private bool Downloading;
    private bool DownloadingVacancies;

    private bool _showFilterParameters = true;
    private bool ShowFilterParameters
    {
        get => _showFilterParameters;
        set
        {
            _showFilterParameters = value;
            Task.Run(OnResetFiltersClicked);
        }
    }

    private VacancyService _vacancyService;
    private UserStorageService _userStorageService;

    private UserViewModel _user;

    protected override async Task OnInitializedAsync()
    {
        StartLoading();

        _vacancyService = new VacancyService();

        _userStorageService = new UserStorageService(Storage);

        await SetUser();
        await GetAllCategories();
        await GetAllSpecialCategories();
        await GetAllWorkTypes();
        await GetAllLocations();
        await GetAllEmploymentTypes();
        await GetAllVacancies();

        base.OnInitialized();

        EndLoading();
    }

    private async Task SetUser()
    {
        var user = await _userStorageService.GetLoginnedUser();

        _user = user;
    }

    private bool SpecialCategoriesSuitableForUser(IEnumerable<SpecialCategoryViewModel> categories)
    {
        if (_user != null && _user.UserInfo != null && _user.UserInfo.SpecialCategories != null &&
            _user.UserInfo.SpecialCategories.Any() && categories != null && categories.Any())
        {
            return _user.UserInfo.SpecialCategories.Intersect(categories).Any();
        }
        return false;
    }

    private async Task OnSearchClicked()
    {
        StartLoadingVacancies();

        VacancySearchFiltersViewModel filters = new VacancySearchFiltersViewModel()
            {
                SearchName = this.SearchName,
                SelectedCategories = this.SelectedCategories,
                SelectedLocation = this.SelectedLocation,
                SelectedEmploymentTypes = this.SelectedEmploymentTypes,
                SelectedSpecialCategories = this.SelectedSpecialCategories,
                SelectedWorkTypes = this.SelectedWorkTypes,
            };

        if (filters.SearchName == null &&
        filters.SelectedCategories == null &&
        filters.SelectedLocation == null &&
        filters.SelectedEmploymentTypes == null &&
        filters.SelectedSpecialCategories == null &&
        filters.SelectedWorkTypes == null)
        {
            await GetAllVacancies();
        }
        else
        {
            await GetFilteredVacancies(filters);
        }

        EndLoadingVacancies();

        StateHasChanged();
    }

    private async Task OnResetFiltersClicked()
    {
        StartLoadingVacancies();

        SelectedCategories = null;
        SelectedEmploymentTypes = null;
        SelectedLocation = null;
        SelectedSpecialCategories = null;
        SelectedWorkTypes = null;
        SearchName = null;

        await GetAllVacancies();

        EndLoadingVacancies();
    }

    private async Task OnDownSortChosen()
    {
        IsDownSort = true;

        StartLoadingVacancies();

        await OnSortTriggerd();

        EndLoadingVacancies();
    }

    private async Task OnUpSortChosen()
    {
        IsDownSort = false;

        StartLoadingVacancies();

        await OnSortTriggerd();

        EndLoadingVacancies();
    }

    private async Task OnDateSortEnabled()
    {
        IsDateSort = true;

        StartLoadingVacancies();

        await OnSortTriggerd();

        EndLoadingVacancies();
    }

    private async Task OnSalarySortEnabled()
    {
        IsDateSort = false;

        StartLoadingVacancies();

        await OnSortTriggerd();

        EndLoadingVacancies();
    }

    private void StartLoading()
    {
        Downloading = true;
    }

    private void EndLoading()
    {
        Downloading = false;
    }

    private void StartLoadingVacancies()
    {
        DownloadingVacancies = true;
    }

    private void EndLoadingVacancies()
    {
        DownloadingVacancies = false;
    }

    private async Task OnSortTriggerd()
    {
        if (IsDateSort)
        {
            if (IsDownSort)
            {
                _vacancies = _vacancies.OrderBy(x => x.CreationTime).ToList();
            }
            else
            {
                _vacancies = _vacancies.OrderByDescending(x => x.CreationTime).ToList();
            }
        }
        else if (!IsDateSort)
        {
            if (IsDownSort)
            {
                _vacancies = _vacancies.OrderByDescending(x => x.Salary).ToList();
            }
            else
            {
                _vacancies = _vacancies.OrderBy(x => x.Salary).ToList();
            }
        }
    }

    private async Task GetFilteredVacancies(VacancySearchFiltersViewModel filters)
    {
        var vacancies = await _vacancyService.GetFilteredVacancies(filters);

        _vacancies = vacancies as ICollection<VacancyViewModel>;

        await OnSortTriggerd();
    }

    private async Task GetAllCategories()
    {
        var categories = await _vacancyService.GetAllCategories();

        Categories = categories.ToList();
    }

    private async Task GetAllSpecialCategories()
    {
        var specialCategories = await _vacancyService.GetAllSpecialCategories();

        SpecialCategories = specialCategories.ToList();
    }

    private async Task GetAllLocations()
    {
        var locations = await _vacancyService.GetAllLocations();

        Locations = locations.ToList();
    }

    private async Task GetAllEmploymentTypes()
    {
        var employmentTypes = await _vacancyService.GetAllEmploymentTypes();

        EmploymentTypes = employmentTypes.ToList();
    }

    private async Task GetAllWorkTypes()
    {
        var workTypes = await _vacancyService.GetAllWorkTypes();

        WorkTypes = workTypes.ToList();
    }

    private async Task GetAllVacancies()
    {
        var vacancies = await _vacancyService.GetAllVacancies();

        _vacancies = vacancies as ICollection<VacancyViewModel>;
    }
}
